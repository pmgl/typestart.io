// Generated by CoffeeScript 1.8.0
var err, name, _i, _len, _ref;

typestart.commands.edit = new Command({
  name: "edit",
  help: "Creates or opens an existing command source file",
  f: function(arg) {
    return typestart.edit(arg);
  },
  complete: function(arg) {
    var i, res, _i, _ref;
    res = typestart.drive.list();
    for (i = _i = _ref = res.length - 1; _i >= 0; i = _i += -1) {
      if (res[i].indexOf(arg) !== 0) {
        res.splice(i, 1);
      }
    }
    return res;
  }
});

typestart.commands.help = new Command({
  name: "help",
  help: "Displays list of commands or help on a particular command",
  f: function(arg) {
    var cmd, name;
    if (arg.length === 0) {
      for (name in typestart.commands) {
        cmd = typestart.commands[name];
        name += ": ";
        while (name.length < 12) {
          name += " ";
        }
        if (cmd instanceof Command) {
          typestart.echo(name + cmd.help);
        } else if (cmd instanceof Alias) {
          typestart.echo(name + "alias " + cmd.command);
        }
      }
    } else {
      if (typestart.commands[arg] != null) {
        cmd = typestart.commands[arg];
        arg += ": ";
        while (arg.length < 12) {
          arg += " ";
        }
        if (cmd instanceof Command) {
          typestart.echo(arg + cmd.help);
          if (cmd.example != null) {
            typestart.echo(cmd.example);
          }
        } else if (cmd instanceof Alias) {
          typestart.echo(arg + "alias " + cmd.command);
        }
        typestart.echo();
      } else {
        "[[;#D42;#300]Command does not exist]";
      }
    }
  }
});

typestart.commands.list = new Command({
  name: "list",
  help: "Displays the list of available commands",
  f: function() {
    var cmd, name;
    for (name in typestart.commands) {
      cmd = typestart.commands[name];
      typestart.echo(name);
    }
  }
});

typestart.commands.alias = new Command({
  name: "alias",
  help: "Creates an alias to another command.",
  example: "alias google open http://www.google.com/?#q={args}",
  f: function(arg) {
    var args, cmd, s;
    s = arg.split(" ");
    if (s.length > 0) {
      cmd = s.splice(0, 1)[0];
      args = s.join(" ").trim();
      typestart.drive.store(cmd, "new Alias(\"" + args.replace(/"/g, "\\\"") + "\")");
      typestart.commands[cmd] = new Alias(args);
      return cmd + ": alias " + args;
    }
  }
});

typestart.commands.open = new Command({
  name: "open",
  help: "opens provided URL",
  f: function(arg) {
    return typestart.open(arg);
  }
});

typestart.commands.remove = new Command({
  name: "remove",
  help: "Removes command or alias",
  f: function(arg) {
    if (typestart.drive.remove(arg)) {
      return "Removed: " + arg;
    } else {
      typestart.error("Not found: " + arg);
    }
  }
});

typestart.commands.install = new Command({
  name: "install",
  help: "Installs a plug-in. Without arguments, lists the official available plug-ins.",
  f: function(arg) {
    if (arg.length > 0) {
      $.get("plugins/" + arg + ".coffee", function(result) {
        typestart.drive.store(arg, result);
        typestart.load(arg);
        return typestart.echo("Successfully installed plug-in: " + arg);
      });
      return "Installing plug-in: " + arg;
    } else {
      typestart.echo("background: allows to set a background picture to your typestart.io");
      typestart.echo("todo: a command line todo list");
      typestart.echo("pass: Generate strong passwords from your main passphrase");
    }
  }
});

try {
  _ref = typestart.drive.list();
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    name = _ref[_i];
    typestart.load(name);
  }
} catch (_error) {
  err = _error;
  typestart.error(err);
}
